--------------------------------------------------------索引--------------------------------------------------
1.索引类似图书中的目录，可以利用索引快速的查找到表的记录。
  索引需要额外的磁盘空间来存放，每次更新数据时系统都会拿
  出额外的实现来更新索引。索引应该建立在重复率相对较低的
  列上最好是唯一列，索引应该建立在内容比较少的列上最好是
  数字列。
  注意事项：
    1）.索引应该建立在经常作为查询条件的列上可以提高查询速度
    2）.索引不应该建立在频繁修改的列上
    3）.索引不要建立特别的多

2.索引的创建语法
  1)create [unique] index 索引名 on 表名(列名1,列名2,...,列名n)
  2)alter table 表名 add [unique] index 索引名(列名1,列名2,...,列名n)
  注意：
    1.unique是可选的添加以后表示当前列是唯一索引（表中的该值只有一个，例如工资就不能建立唯一索引，
      因为有的工资是重复的）
    2.可以同时为多个列建立索引，称为复合索引，建立好复合索引后只有这些列同时出现在where
      后面索引才会起作用（不推荐）
    3.索引名字除在删除索引的时候有作用以外其他时候没有作用，但是不能重复。

3.删除索引语法
  1）drop index 索引 on 表名
  2）alter table 表名 drop index 索引名

--------------------------------------------------------视图--------------------------------------------------
1.视图是一个基于查询语句形成的一个虚拟表，它可以提高查询的速度降低多表查询时的语句复杂度
  视图的创建语法：
    create view 视图名 as 查询语句;
  视图的删除语法：
    drop view 视图名;
  视图的修改语法：
    alter view 视图名 as 查询语句;
  注意事项：
    1.视图在使用时可以将视图的名字当做是表名直接进行查询。
    2.视图通常是由多个表组成，因此不要对视图进行更新操作。
 
2.创建视图 可视化工具创建视图

---------------------------------------------------用户权限管理------------------------------------------------
1.创建数据库用户
  create user 用户名 identified by 密码;
  例：
  create user admin identified by '1234';
  可以登录但是只看见一个库 information_schema

2.授权 
  grant all privileges on dbname.tbname to 'username'@'login ip' identified by 'password' with grant option;
  1)dbname=*表示所有的数据库
  2)tbname=*表示所有的表
  3)login ip=%表示任何ip
  4)password为空表示不需要密码即可登录
  5)with grant option 表示该用户还可以授权给其他用户
  例：grant all privileges on *.* to 'admin'@'%' identified by '1234' with grant option;//%可以写localhost或指定ip...

3.privileges包括，对应上面语句中all的位置
  1.alter修改数据库的表
  2.create创建新的数据库或表
  3.delete删除表数据
  4.drop删除库/表
  5.index创建/删除索引
  6.insert添加表数据
  7.select查询表数据
  8.update更新表数据
  9.all允许任何操作
  10.usage只允许登录

4.回收权限和删除用户和修改用户密码
  revoke all privileges on *.* from 用户名;
  例：revoke all privileges on *.* from admin;
  drop user 用户名;
  例：drop user admin;
  update user set password =password('2345') where user = 用户名;
  例 update user set password =password('2345') where user = 'admin';

----------------------------------------------------数据导入导出------------------------------------------------
1.导出
  1.导出整个数据库
    在windows的dos命令窗口中执行:mysqldump bjpowernode>D:\bjpowernode.sql -uroot -p123;
  2.导出指定库下的指定表
    在windows的dos命令窗口中执行:mysqldump bjpowernode emp>D:\bjpowernode.sql -uroot -p123;
    //bjpowernode数据库 emp数据库中的表  
    //D:\bjpowernode.sql -uroot -p123存储位置 用户名 用户密码
  注意：
    1.可视化工具中的导出操作：
      例如navicate premium。选中指定的数据库或数据库表，右键选择转储sql文件，选择存储的位置。
    2.可视化工具中的导入操作：
      例如navicate premium。选中指定的数据库或新建数据库，右键选择运行sql文件。

2.导入
  登录mysql数据库管理系统之后执行：source D:\bjpowernode.sql;

----------------------------------------------------数据库设计范式---------------------------------------------
1.一共有6种范式，通常满足前三种即可，也称数据库的设计三大范式
  第一范式：每一个列的数据的内容应该具有原子性不可分割，不应该存放类似像数组或集合这样的数据

  第二范式：如果要满足第二范式那么就必须要先满足第一范式，表中的数据应该能够被唯一的区分出来
            不能出现重复的数据。因此表中需要拥有主键。

  第三范式：如果要满足第三范式那么就必须要先满足第二范式，在做外键关联时外键列必须要关联到另一张表
            的主键列上形成唯一的关联。如果添加了外键，这个表中不能出现关联表中的其他字段，例如学生
	    表中存放了班级的id作为外键那么学生表中就不能出现除班级id以外的班级表中的其它字段。



  

